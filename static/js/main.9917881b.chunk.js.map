{"version":3,"sources":["components/NewCommentForm/NewCommentForm.tsx","components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["FieldNames","PostsList","posts","selectedPostId","setPostId","className","map","post","userId","title","type","onClick","id","defaultErrorsObj","name","body","email","NewCommentForm","handleAddComment","useState","setName","setEmail","setBody","errors","setErrors","handleInput","fieldName","event","value","target","hasError","replace","EmailValidator","validateField","onSubmit","preventDefault","autoComplete","onChange","e","placeholder","disabled","hasEmptyFields","some","field","hasErrors","Object","values","error","isFormComplete","BASE_URL","getPosts","url","fetch","then","res","json","getUserPosts","getPostDetails","postId","getPostComments","addComment","method","headers","JSON","stringify","catch","err","deleteComment","commentId","PostDetails","postDetails","setPostDetails","comments","setComments","showComments","setShowComments","loading","setLoading","loadPostDetails","a","Promise","all","detailsFromServer","commentsFromServer","useEffect","handleDeleteComment","length","comment","App","setPosts","user","setUser","loadPosts","loadedPosts","htmlFor","useId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9917881b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport * as EmailValidator from 'email-validator';\n\nenum FieldNames {\n  name,\n  body,\n  email,\n}\n\ntype Props = {\n  handleAddComment: ({ name, email, body }: CommentBody) => void,\n};\n\ntype InputEvent = React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>;\n\nconst defaultErrorsObj = {\n  [FieldNames.name]: false,\n  [FieldNames.body]: false,\n  [FieldNames.email]: false,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ handleAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [errors, setErrors] = useState(defaultErrorsObj);\n\n  const isFormComplete = () => {\n    const hasEmptyFields = [name, email, body].some(field => field === '');\n    const hasErrors = Object.values(errors).some(error => error);\n\n    return hasEmptyFields || hasErrors;\n  };\n\n  const validateField = (fieldName: FieldNames, value: string) => {\n    let hasError = false;\n\n    switch (fieldName) {\n      case FieldNames.name:\n      case FieldNames.body:\n        hasError = value.replace(/ /g, '') === '';\n        break;\n      case FieldNames.email:\n        hasError = !EmailValidator.validate(value);\n        break;\n      default:\n        break;\n    }\n\n    setErrors({\n      ...errors,\n      [fieldName]: hasError,\n    });\n  };\n\n  const handleInput = (fieldName: FieldNames, event: InputEvent) => {\n    const { value } = event.target;\n\n    switch (fieldName) {\n      case FieldNames.name:\n        setName(value);\n        break;\n      case FieldNames.email:\n        setEmail(value);\n        break;\n      case FieldNames.body:\n        setBody(value);\n        break;\n      default:\n        break;\n    }\n\n    validateField(fieldName, value);\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      onSubmit={(event: React.FormEvent) => {\n        event.preventDefault();\n        handleAddComment({\n          name,\n          email,\n          body,\n        });\n        clearForm();\n      }}\n      autoComplete=\"off\"\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(e) => {\n            handleInput(FieldNames.name, e);\n          }}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      {errors[FieldNames.name] && (\n        <span className=\"NewCommentForm__warning\">\n          Can&apos;t be empty\n        </span>\n      )}\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => {\n            handleInput(FieldNames.email, e);\n          }}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      {errors[FieldNames.email] && (\n        <span className=\"NewCommentForm__warning\">\n          Must be a valid email\n        </span>\n      )}\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={(e) => {\n            handleInput(FieldNames.body, e);\n          }}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      {errors[FieldNames.body] && (\n        <span className=\"NewCommentForm__warning\">\n          Can&apos;t be empty\n        </span>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        disabled={isFormComplete()}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  setPostId: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId, setPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.title} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n            </b>\n            {' '}\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => {\n              setPostId(post.id);\n            }}\n          >\n            {selectedPostId === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport function getPosts(): Promise<Post[]> {\n  const url = `${BASE_URL}/posts`;\n\n  return fetch(url)\n    .then(res => res.json());\n}\n\nexport const getUserPosts = (userId: number) => {\n  const url = `${BASE_URL}/posts?userId=${userId}`;\n\n  return fetch(url)\n    .then(res => res.json());\n};\n\nexport const getPostDetails = (postId: number) => {\n  const url = `${BASE_URL}/posts/${postId}`;\n\n  return fetch(url)\n    .then(res => res.json());\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = (postId: number) => {\n  const url = `${BASE_URL}/comments/?postId=${postId}`;\n\n  return fetch(url)\n    .then(res => res.json());\n};\n\nexport const addComment = ({\n  postId,\n  name,\n  body,\n  email,\n}: CommentBody) => {\n  const url = `${BASE_URL}/comments`;\n\n  return fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      body,\n      email,\n    }),\n  })\n    .catch(err => err);\n};\n\nexport const deleteComment = (commentId: number) => {\n  const url = `${BASE_URL}/comments/${commentId}`;\n\n  return fetch(url, {\n    method: 'DELETE',\n  })\n    .catch(err => err);\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, addComment, deleteComment } from '../../api/comments';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState({} as Post);\n  const [comments, setComments] = useState([] as Comment[]);\n  const [showComments, setShowComments] = useState(true);\n  const [loading, setLoading] = useState(true);\n\n  const loadPostDetails = async () => {\n    setLoading(true);\n    const [detailsFromServer, commentsFromServer] = await Promise.all([\n      getPostDetails(postId),\n      getPostComments(postId)]);\n\n    setPostDetails(detailsFromServer);\n    setComments(commentsFromServer);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    loadPostDetails();\n  }, [postId]);\n\n  const handleAddComment = async ({ name, body, email }: CommentBody) => {\n    await addComment({\n      postId,\n      name,\n      body,\n      email,\n    });\n    const commentsFromServer = await (getPostComments(postId));\n\n    setComments(commentsFromServer);\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    await deleteComment(commentId);\n    const commentsFromServer = await (getPostComments(postId));\n\n    setComments(commentsFromServer);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {loading ? 'Loading post details...' : (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setShowComments(!showComments);\n              }}\n            >\n              {showComments ? 'Hide' : 'Show'}\n              {' '}\n              {comments.length}\n              {' '}\n              comments\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {showComments && comments.map(comment => (\n                <li key={comment.id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => handleDeleteComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                handleAddComment={handleAddComment}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([] as Post[]);\n  const [user, setUser] = useState(0);\n  const [selectedPostId, setPostId] = useState(0);\n\n  const loadPosts = async () => {\n    let loadedPosts;\n\n    if (user === 0) {\n      loadedPosts = await getPosts();\n\n      setPosts(loadedPosts);\n    } else {\n      loadedPosts = await getUserPosts(user);\n    }\n\n    setPosts(loadedPosts);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [user]);\n\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const userId = +event.target.value;\n\n    setUser(userId);\n  };\n\n  const handleSetPostId = (postId: number) => {\n    let useId = postId;\n\n    if (postId === selectedPostId) {\n      useId = 0;\n    }\n\n    setPostId(useId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"users\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"users\"\n            value={user}\n            className=\"App__user-selector\"\n            onChange={handleUserSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            setPostId={handleSetPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}